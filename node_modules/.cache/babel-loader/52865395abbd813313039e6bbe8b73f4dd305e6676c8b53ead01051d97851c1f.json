{"ast":null,"code":"var _jsxFileName = \"/home/sean_suguitan/john-mayer-player/src/components/VideoList.js\",\n  _s = $RefreshSig$();\nimport React, { useState, useEffect } from 'react';\nimport axios from 'axios';\nimport YouTube from 'react-youtube';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst VideoList = () => {\n  _s();\n  const [videos, setVideos] = useState([]);\n  const apiKey = 'AIzaSyBVIOEDjrULYj_7yyTKCsUZswI6zyvlaVE'; // Ensure this API key is correct\n\n  useEffect(() => {\n    const fetchVideos = async () => {\n      try {\n        const params = {\n          key: apiKey,\n          part: 'snippet',\n          q: 'John Mayer',\n          type: 'video',\n          maxResults: 10\n        };\n        const response = await axios.get('https://www.googleapis.com/youtube/v3/search', {\n          params\n        });\n\n        // Log the request URL for debugging\n        console.log('Request URL:', `https://www.googleapis.com/youtube/v3/search?${new URLSearchParams(params).toString()}`);\n        setVideos(response.data.items);\n      } catch (error) {\n        console.error('Error fetching videos:', error);\n        // Log the error response for more details\n        if (error.response) {\n          console.log('Error Response Data:', error.response.data);\n        }\n      }\n    };\n    fetchVideos();\n  }, [apiKey]);\n  const opts = {\n    height: '390',\n    width: '640',\n    playerVars: {\n      autoplay: 0\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: videos.map(video => /*#__PURE__*/_jsxDEV(YouTube, {\n      videoId: video.id.videoId,\n      opts: opts\n    }, video.id.videoId, false, {\n      fileName: _jsxFileName,\n      lineNumber: 48,\n      columnNumber: 9\n    }, this))\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 46,\n    columnNumber: 5\n  }, this);\n};\n_s(VideoList, \"39g9r2hk3cJXA16k+db4Z3Rqykw=\");\n_c = VideoList;\nexport default VideoList;\nvar _c;\n$RefreshReg$(_c, \"VideoList\");","map":{"version":3,"names":["React","useState","useEffect","axios","YouTube","jsxDEV","_jsxDEV","VideoList","_s","videos","setVideos","apiKey","fetchVideos","params","key","part","q","type","maxResults","response","get","console","log","URLSearchParams","toString","data","items","error","opts","height","width","playerVars","autoplay","children","map","video","videoId","id","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/home/sean_suguitan/john-mayer-player/src/components/VideoList.js"],"sourcesContent":["import React, { useState, useEffect } from 'react';\r\nimport axios from 'axios';\r\nimport YouTube from 'react-youtube';\r\n\r\nconst VideoList = () => {\r\n  const [videos, setVideos] = useState([]);\r\n  const apiKey = 'AIzaSyBVIOEDjrULYj_7yyTKCsUZswI6zyvlaVE'; // Ensure this API key is correct\r\n\r\n  useEffect(() => {\r\n    const fetchVideos = async () => {\r\n      try {\r\n        const params = {\r\n          key: apiKey,\r\n          part: 'snippet',\r\n          q: 'John Mayer',\r\n          type: 'video',\r\n          maxResults: 10,\r\n        };\r\n        const response = await axios.get('https://www.googleapis.com/youtube/v3/search', { params });\r\n\r\n        // Log the request URL for debugging\r\n        console.log('Request URL:', `https://www.googleapis.com/youtube/v3/search?${new URLSearchParams(params).toString()}`);\r\n\r\n        setVideos(response.data.items);\r\n      } catch (error) {\r\n        console.error('Error fetching videos:', error);\r\n        // Log the error response for more details\r\n        if (error.response) {\r\n          console.log('Error Response Data:', error.response.data);\r\n        }\r\n      }\r\n    };\r\n\r\n    fetchVideos();\r\n  }, [apiKey]);\r\n\r\n  const opts = {\r\n    height: '390',\r\n    width: '640',\r\n    playerVars: {\r\n      autoplay: 0,\r\n    },\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      {videos.map(video => (\r\n        <YouTube key={video.id.videoId} videoId={video.id.videoId} opts={opts} />\r\n      ))}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default VideoList;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,QAAQ,EAAEC,SAAS,QAAQ,OAAO;AAClD,OAAOC,KAAK,MAAM,OAAO;AACzB,OAAOC,OAAO,MAAM,eAAe;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEpC,MAAMC,SAAS,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACtB,MAAM,CAACC,MAAM,EAAEC,SAAS,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EACxC,MAAMU,MAAM,GAAG,yCAAyC,CAAC,CAAC;;EAE1DT,SAAS,CAAC,MAAM;IACd,MAAMU,WAAW,GAAG,MAAAA,CAAA,KAAY;MAC9B,IAAI;QACF,MAAMC,MAAM,GAAG;UACbC,GAAG,EAAEH,MAAM;UACXI,IAAI,EAAE,SAAS;UACfC,CAAC,EAAE,YAAY;UACfC,IAAI,EAAE,OAAO;UACbC,UAAU,EAAE;QACd,CAAC;QACD,MAAMC,QAAQ,GAAG,MAAMhB,KAAK,CAACiB,GAAG,CAAC,8CAA8C,EAAE;UAAEP;QAAO,CAAC,CAAC;;QAE5F;QACAQ,OAAO,CAACC,GAAG,CAAC,cAAc,EAAE,gDAAgD,IAAIC,eAAe,CAACV,MAAM,CAAC,CAACW,QAAQ,CAAC,CAAC,EAAE,CAAC;QAErHd,SAAS,CAACS,QAAQ,CAACM,IAAI,CAACC,KAAK,CAAC;MAChC,CAAC,CAAC,OAAOC,KAAK,EAAE;QACdN,OAAO,CAACM,KAAK,CAAC,wBAAwB,EAAEA,KAAK,CAAC;QAC9C;QACA,IAAIA,KAAK,CAACR,QAAQ,EAAE;UAClBE,OAAO,CAACC,GAAG,CAAC,sBAAsB,EAAEK,KAAK,CAACR,QAAQ,CAACM,IAAI,CAAC;QAC1D;MACF;IACF,CAAC;IAEDb,WAAW,CAAC,CAAC;EACf,CAAC,EAAE,CAACD,MAAM,CAAC,CAAC;EAEZ,MAAMiB,IAAI,GAAG;IACXC,MAAM,EAAE,KAAK;IACbC,KAAK,EAAE,KAAK;IACZC,UAAU,EAAE;MACVC,QAAQ,EAAE;IACZ;EACF,CAAC;EAED,oBACE1B,OAAA;IAAA2B,QAAA,EACGxB,MAAM,CAACyB,GAAG,CAACC,KAAK,iBACf7B,OAAA,CAACF,OAAO;MAAwBgC,OAAO,EAAED,KAAK,CAACE,EAAE,CAACD,OAAQ;MAACR,IAAI,EAAEA;IAAK,GAAxDO,KAAK,CAACE,EAAE,CAACD,OAAO;MAAAE,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAA0C,CACzE;EAAC;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACjC,EAAA,CA/CID,SAAS;AAAAmC,EAAA,GAATnC,SAAS;AAiDf,eAAeA,SAAS;AAAC,IAAAmC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}